#!/usr/bin/env python3
# import all the necessary modules
import requests
import httplib2
import json
import random
import string
from flask import Flask, flash, redirect, render_template
from flask import session as login_session
from flask import make_response,  url_for, jsonify, request
from oauth2client.client import FlowExchangeError
from oauth2client.client import flow_from_clientsecrets
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine, asc
from database_setup import User, Category, Item


# Create a new Flask class instance.

app = Flask(__name__)
# Fetch the Client ID from client_secrets generated by Google API."""
CLIENT_ID = json.loads(
    open('client_secrets.json', 'r').read())['web']['client_id']
# Create a new class engine instance.
engine = create_engine('sqlite:///filmcatalog.db',
                       connect_args={'check_same_thread': False})
# Make the above engine associated with Session objects.
Session = sessionmaker(bind=engine)
# Create a new Session class object.
session = Session()


# Login Handling
# Login route

@app.route('/login/')
def login():
    """Login view function and make anti-forgery state token to validate
    specific user"""
    state = ''.join(random.choice(string.ascii_uppercase + string.digits)
                    for x in range(32))
    login_session['state'] = state
    return render_template("login.html", STATE=state)

# Google account to log in
# Connect to google login


@app.route('/gconnect', methods=['POST'])
def gconnect():
    """Click the Google Log-in Button and check whether the user have the same
    token or not."""
    if request.args.get('state') != login_session['state']:
        response = make_response(json.dumps('Invalid state parameter.'), 401)
        response.headers['Content-Type'] = 'application/json'
        return response
    """If it is true,store the value of request'date into Variable code"""
    code = request.data
    try:
        """ Upgrade the authorization code into a credentials object."""
        oauth_flow = flow_from_clientsecrets('client_secrets.json', scope='')
        oauth_flow.redirect_uri = 'postmessage'
        credentials = oauth_flow.step2_exchange(code)
    except FlowExchangeError:
        """If occur exception,return failed message to client."""
        response = make_response(
            json.dumps('Failed to upgrade the authorization code.'), 401)
        response.headers['Content-Type'] = 'application/json'
        return response

    """Send the access_token to google server to check and receive the response 
    from google server. """
    access_token = credentials.access_token
    url = ('https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=%s'
           % access_token)
    h = httplib2.Http()
    result = json.loads(h.request(url, 'GET')[1])
    """If occur error,return error message to client."""
    if result.get('error') is not None:
        response = make_response(json.dumps(result.get('error')), 500)
        response.headers['Content-Type'] = 'application/json'
        return response

    """ Verify that the google_id of access token is the same as user_id 
    of google."""
    google_id = credentials.id_token['sub']
    if result['user_id'] != google_id:
        """If occur error,return error message to client."""
        response = make_response(
            json.dumps("Token's user ID doesn't match given user ID."), 401)
        response.headers['Content-Type'] = 'application/json'
        return response

    """ Verify that the client ID is valid for this app."""
    if result['issued_to'] != CLIENT_ID:
        """If occur error,return error message to client."""
        response = make_response(
            json.dumps("Token's client ID does not match app's."), 401)
        print("Token's client ID does not match app's.")
        response.headers['Content-Type'] = 'application/json'
        return response

    """If user has logged in,the value of login_session['access_token'] and 
    login_session['google_id'] have been assigned.Whether the variables of 
    stored_access_token and stored_google_id have been assigned or not depends 
    on whether login_session['access_token'] and login_session['google_id'] have 
    been assigned or not.If stored_access_token is not None and the value of 
    google_id is the same as login_session['google_id'],it means that current 
    user has been logged in.Then it return the message to the client."""

    stored_access_token = login_session.get('access_token')
    stored_google_id = login_session.get('google_id')
    if stored_access_token is not None and google_id == stored_google_id:
        response = make_response(
            json.dumps('Current user is already connected.'), 200)
        response.headers['Content-Type'] = 'application/json'
        return response
    """If all the 'if clauses'above haven't been matched,it means that the 
    login of google account succeed.Then store the access_token and google_id in
    the login_session."""
    login_session['access_token'] = credentials.access_token
    login_session['google_id'] = google_id

    """Store the user information in the variable answer by requesting the 
    google server."""
    userinfo_url = "https://www.googleapis.com/oauth2/v1/userinfo"
    params = {'access_token': credentials.access_token, 'alt': 'json'}
    answer = requests.get(userinfo_url, params=params)
    """Assign the value of json-encoded content of variable answer to the 
    variable data."""
    data = answer.json()
    """Assign the user information of variable data to the variable 
    login_session."""
    login_session['provider'] = 'google'
    login_session['username'] = data['name']
    login_session['picture'] = data['picture']
    login_session['email'] = data['email']
    """Check whether login user of google has been existed in database or not.
    If not, create a new user.And assign the user_id to the variable 
    login_session."""
    user_id = get_user_id(data["email"])
    if not user_id:
        user_id = create_user(login_session)
    login_session['user_id'] = user_id

    """Show a welcome screen about successful login."""
    output = ''
    output += '<h2>Welcome, '
    output += login_session['username']
    output += '!</h2>'
    output += '<img src="'
    output += login_session['picture']
    output += ' " style = "width: 250px; height: 250px; '
    output += 'border-radius: 150px;'
    output += '-webkit-border-radius: 150px;-moz-border-radius: 150px;">'
    flash("You are now logged in as %s!" % login_session['username'])
    print("Done!")
    return output

# Facebook account to log in

# Connect to facebook login.


@app.route('/fbconnect', methods=['POST'])
def fbconnect():
    """Click the Facebook Log-in Button and check whether the user have the same
     token or not."""
    if request.args.get('state') != login_session['state']:
        response = make_response(json.dumps('Invalid state parameter.'), 401)
        response.headers['Content-Type'] = 'application/json'
        return response
    """If it is true,store the value of request'date into Variable code"""
    access_token = request.data

    """Exchange client token for long-lived server-side token."""
    app_id = json.loads(
        open('fb_client_secrets.json', 'r').read())['web']['app_id']
    app_secret = json.loads(
        open('fb_client_secrets.json', 'r').read())['web']['app_secret']
    url = ('https://graph.facebook.com/v2.10/oauth/access_token?grant_type'
           '=fb_exchange_token&client_id=%s&client_secret=%s&fb_exchange_token='
           '%s') % (app_id, app_secret, access_token)
    http = httplib2.Http()
    result = http.request(url, 'GET')[1]
    data = json.loads(result)

    """Extract the access token from response and compose the variable token."""
    token = 'access_token=' + data['access_token']

    """Use token to get user info from API."""
    url = 'https://graph.facebook.com/v2.10/me?%s&fields=name,id,email' % token
    http = httplib2.Http()
    result = http.request(url, 'GET')[1]
    data = json.loads(result)

    login_session['provider'] = 'facebook'
    login_session['username'] = data["name"]
    login_session['email'] = data["email"]
    login_session['facebook_id'] = data["id"]

    """Stored the access_token in the login_session"""
    stored_token = token.split("=")[1]
    login_session['access_token'] = stored_token

    """Get user picture."""
    url = ('https://graph.facebook.com/v2.10/me/picture?%s&redirect=0&height='
           '200&width=200') % token
    http = httplib2.Http()
    result = http.request(url, 'GET')[1]
    data = json.loads(result)
    login_session['picture'] = data["data"]["url"]

    """Check whether login user of google has been existed in database or not.
    If not, create a new user.And assign the user_id to the variable 
    login_session."""
    user_id = get_user_id(login_session['email'])
    if not user_id :
        user_id = create_user(login_session)
    login_session['user_id'] = user_id
    """Show a welcome screen about successful login."""
    output = ''
    output += '<h4>Welcome, '
    output += login_session['username']
    output += '!</h4>'
    output += '<img src="'
    output += login_session['picture']
    output += ' " style="width: 250px; height: 250px;"> '
    flash("You are now logged in as %s" % login_session['username'])
    return output

# Google account Logout Handling
# Revoke a current user's token and reset their login_session.


def gdisconnect():
    """Check whether login_session exists the value of key of 'access_token'
    or not.If does not,return the message to client."""
    access_token = login_session.get('access_token')
    if access_token is None:
        response = make_response(
            json.dumps('Current user not connected.'), 401)
        response.headers['Content-Type'] = 'application/json'
        return response
    """If dose, return the instance of Response class """
    url = 'https://accounts.google.com/o/oauth2/revoke?token=%s' % access_token
    h = httplib2.Http()
    result = h.request(url, 'GET')[0]
    """If the returned instance of Response's key 'status' is '200',it means 
    successfully disconnect .If the returned instance of Response's key 'status'
    is '400',it means failed to disconnect."""
    if result['status'] == '200':
        response = make_response(json.dumps('Successfully disconnected.'), 200)
        response.headers['Content-Type'] = 'application/json'
        return response
    else:
        response = make_response(
            json.dumps('Failed to revoke token for given user.'), 400)
        response.headers['Content-Type'] = 'application/json'
        return response

# Facebook account Logout Handling

# Revoke a current user's token and reset their login_session.


def fbdisconnect():
    facebook_id = login_session['facebook_id']
    """Delete the access_token and facebook_id of logged_in account via API"""
    access_token = login_session['access_token']
    url = 'https://graph.facebook.com/%s/permissions?access_token=%s' % \
          (facebook_id, access_token)
    h = httplib2.Http()
    result = h.request(url, 'DELETE')[1]
    """If the returned instance of Response's key 'status' is '200',it means 
    successfully disconnect .If the returned instance of Response's key 'status'
    is '400',it means failed to disconnect."""
    if result['status'] == '200':
        response = make_response(json.dumps('Successfully disconnected.'), 200)
        response.headers['Content-Type'] = 'application/json'
        return response
    else:
        response = make_response(
            json.dumps('Failed to revoke token for given user.'), 400)
        response.headers['Content-Type'] = 'application/json'
        return response

# Logout handling


@app.route('/logout')
def logout():
    """Logout view function and log out the currently connected user."""
    if 'provider' in login_session:
        if login_session['provider'] == 'google':
            gdisconnect()
            if 'google_id' in login_session:
                del login_session['google_id']
        if login_session['provider'] == 'facebook':
            fbdisconnect()
            del login_session['facebook_id']
        del login_session['access_token']
        del login_session['username']
        del login_session['email']
        del login_session['picture']
        del login_session['user_id']
        flash("You have been successfully logged out!")
        return redirect(url_for('home'))
    else:
        flash("You were not logged in!")
        return redirect(url_for('home'))

# User helper functions


def create_user(login_session):
    """Make the login_session as input ,create a new user in database and
    return the user_id."""
    new_user = User(
        name=login_session['username'],
        email=login_session['email'],
        picture=login_session['picture']
    )
    session.add(new_user)
    session.commit()
    user = session.query(User).filter_by(email=login_session['email']).one()
    return user.id


def get_user_info(user_id):
    """Make the user_id as input and return the user."""
    user = session.query(User).filter_by(id=user_id).one()
    return user


def get_user_id(email):
    """Make the email as input and return the user_id."""
    try:
        user = session.query(User).filter_by(email=email).one()
        return user.id
    except:
        return None

# Category and Item helper function

# Check if the item exists in the database,


def have_item(item_id):
    """make the item_id as input and return boolean value to show whether
    the item exists or not."""
    item = session.query(Item).filter_by(id=item_id).first()
    if item is None:
        return False
    else:
        return True
# Check if the category exists in the database.


def have_category(category_id):
    """make the category_id as input and return boolean value to show whether
    the category exists or not."""
    category = session.query(Category).filter_by(id=category_id).first()
    if category is None:
        return False
    else:
        return True

# Read for categories and items.


@app.route('/')
@app.route('/catalog/')
@app.route('/catalog/items/')
def home():
    """Homepage view function"""
    categories = session.query(Category).all()
    items = session.query(Item).all()
    return render_template(
        'index.html', categories=categories, items=items)

# Show an item by its ID.


@app.route('/catalog/item/<int:item_id>/')
def view_item(item_id):
    """Show an item by its ID."""

    if have_item(item_id):
        item = session.query(Item).filter_by(id=item_id).first()
        category = session.query(Category)\
            .filter_by(id=item.category_id).first()
        return render_template(
            "view_item.html",
            item=item,
            category=category,
        )
    else:
        return redirect(url_for('home'))

# Show items in a particular category.


@app.route('/catalog/category/<int:category_id>/items/')
def show_items_in_category(category_id):
    """# Show items in a particular category."""
    if not have_category(category_id):
        return redirect(url_for('home'))
    category = session.query(Category).filter_by(id=category_id).first()
    items = session.query(Item).filter_by(category_id=category.id).all()
    itemtotal = len(items)
    return render_template(
        'items.html',
        category=category,
        items=items,
        itemtotal=itemtotal)

# Create/Update/Delete for category

# Create a new category.


@app.route("/catalog/category/new/", methods=['GET', 'POST'])
def add_category():
    """Create a new category."""
    if 'username' not in login_session:
        return redirect(url_for('login'))
    elif request.method == 'POST':
        if request.form['new-category-name'] == '':
            return redirect(url_for('home'))
        category = session.query(Category).\
            filter_by(name=request.form['new-category-name']).first()
        if category is not None:
            return redirect(url_for('add_category'))
        new_category = Category(
            name=request.form['new-category-name'],
            user_id=login_session['user_id'])
        session.add(new_category)
        session.commit()
        flash('New category %s successfully created!' % new_category.name)
        return redirect(url_for('home'))
    else:
        return render_template('new_category.html')

# Update a category.


@app.route('/catalog/category/<int:category_id>/edit/',
           methods=['GET', 'POST'])
def edit_category(category_id):
    """Update a category."""
    category = session.query(Category).filter_by(id=category_id).first()
    if 'username' not in login_session:
        return redirect(url_for('login'))
    if not have_category(category_id):
        flash("We are unable to process your request right now.")
        return redirect(url_for('home'))
    if login_session['user_id'] != category.user_id:
        flash("You are not authorized to edit this restaurant. "
              "Please create your own category in order to edit.")
        return redirect(url_for('home'))
    if request.method == 'POST':
        if request.form['name']:
            category.name = request.form['name']
            session.add(category)
            session.commit()
            flash('Category successfully edited!')
            return redirect(url_for('show_items_in_category',
                                    category_id=category.id))
    else:
        return render_template('edit_category.html', category=category)

# Delete a category.


@app.route('/catalog/category/<int:category_id>/delete/',
           methods=['GET', 'POST'])
def delete_category(category_id):
    """Delete a category."""

    category = session.query(Category).filter_by(id=category_id).first()

    if 'username' not in login_session:
        return redirect(url_for('login'))
    if not have_category(category_id):
        return redirect(url_for('home'))
    if login_session['user_id'] != category.user_id:
        return redirect(url_for('home'))
    if request.method == 'POST':
        session.delete(category)
        session.commit()
        flash("Category successfully deleted!")
        return redirect(url_for('home'))
    else:
        return render_template("delete_category.html", category=category)


# Create/Update/Delete for items

# Create a new item.
@app.route("/catalog/item/new/", methods=['GET', 'POST'])
def add_item():
    """Create a new item."""
    if 'username' not in login_session:
        return redirect(url_for('login'))
    elif request.method == 'POST':
        item = session.query(Item).filter_by(name=request.form['name']).first()
        if item:
            if item.name == request.form['name']:
                return redirect(url_for("add_item"))
        new_item = Item(
            name=request.form['name'],
            category_id=request.form['category'],
            description=request.form['description'],
            user_id=login_session['user_id']
        )
        session.add(new_item)
        session.commit()
        flash('New item successfully created!')
        return redirect(url_for('home'))
    else:
        items = session.query(Item).\
                filter_by(user_id=login_session['user_id']).all()
        categories = session.query(Category).\
            filter_by(user_id=login_session['user_id']).all()
        return render_template(
            'new_item.html',
            items=items,
            categories=categories
        )

# Create new item by Category ID.


@app.route("/catalog/category/<int:category_id>/item/new/",
           methods=['GET', 'POST'])
def add_item_by_category(category_id):
    """Create new item by Category ID."""

    if 'username' not in login_session:
        return redirect(url_for('login'))
    elif request.method == 'POST':
        item = session.query(Item).filter_by(name=request.form['name']).first()
        if item:
            if item.name == request.form['name']:
                return redirect(url_for("add_item"))
        new_item = Item(
            name=request.form['name'],
            category_id=category_id,
            description=request.form['description'],
            user_id=login_session['user_id'])
        session.add(new_item)
        session.commit()
        flash('New item successfully created!')
        return redirect(url_for('show_items_in_category',
                                category_id=category_id))
    else:
        category = session.query(Category).filter_by(id=category_id).first()
        return render_template('new_item2.html', category=category)


# Update existing item.
@app.route("/catalog/item/<int:item_id>/edit/", methods=['GET', 'POST'])
def edit_item(item_id):
    """Update existing item."""

    if 'username' not in login_session:
        return redirect(url_for('login'))
    if not have_item(item_id):
        return redirect(url_for('home'))
    item = session.query(Item).filter_by(id=item_id).first()
    if login_session['user_id'] != item.user_id:
        return redirect(url_for('home'))
    if request.method == 'POST':
        if request.form['name']:
            item.name = request.form['name']
        if request.form['description']:
            item.description = request.form['description']
        if request.form['category']:
            item.category_id = request.form['category']
        session.add(item)
        session.commit()
        flash('Item successfully updated!')
        return redirect(url_for('edit_item', item_id=item_id))
    else:
        categories = session.query(Category).\
            filter_by(user_id=login_session['user_id']).all()
        return render_template(
            'update_item.html',
            item=item,
            categories=categories
        )

# Delete existing item.


@app.route("/catalog/item/<int:item_id>/delete/", methods=['GET', 'POST'])
def delete_item(item_id):
    """Delete existing item."""

    if 'username' not in login_session:
        return redirect(url_for('login'))
    if not have_item(item_id):
        return redirect(url_for('home'))
    item = session.query(Item).filter_by(id=item_id).first()
    if login_session['user_id'] != item.user_id:
        return redirect(url_for('home'))
    if request.method == 'POST':
        session.delete(item)
        session.commit()
        flash("Item successfully deleted!")
        return redirect(url_for('home'))
    else:
        return render_template('delete.html', item=item)

# JSON Endpoints to show information

# Return JSON of all the items in the catalog.


@app.route('/show/catalog/JSON')
def show_catalog_json():
    """Return JSON of all the items in the catalog."""
    items = session.query(Item).order_by(Item.id.desc())
    return jsonify(items=[i.serialize for i in items])

# Return JSON of a particular item in the catalog.


@app.route('/show/categories/<int:category_id>/item/<int:item_id>/JSON')
def catalog_item_json(category_id, item_id):
    """Return JSON of a particular item in the catalog."""
    if have_category(category_id) and have_item(item_id):
        item = session.query(Item).filter_by(
            id=item_id, category_id=category_id).first()
        if not item:
            return jsonify(item=item.serialize)
        else:
            return jsonify(error='item {} does not belong to category{}.'
                           .format(item_id, category_id))
    else:
        return jsonify(error='The item or the category does not exist.')

# Return JSON of all the categories in the catalog.


@app.route('/show/categories/JSON')
def categories_json():
    """Returns JSON of all the categories in the catalog."""
    categories = session.query(Category).all()
    return jsonify(categories=[i.serialize for i in categories])


if __name__ == "__main__":
    app.secret_key = 'super_secret_key'
    app.run(host="0.0.0.0", port=5000, debug=True)
